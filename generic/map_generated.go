package generic

// Code generated by go generate; DO NOT EDIT.

import (
	"github.com/mlange-42/arche/ecs"
)

//////////////////////////////////////////////////////////////////////////

// Map1 is a helper for mapping one components.
type Map1[A any] struct {
	world *ecs.World
	id0   ecs.ID
}

// NewMap1 creates a new Map1 object.
func NewMap1[A any](w *ecs.World) Map1[A] {
	return Map1[A]{
		world: w,
		id0:   ecs.ComponentID[A](w),
	}
}

// Get all the Map1's components for the given entity.
//
// See also [ecs.World.Get].
func (m *Map1[A]) Get(entity ecs.Entity) *A {
	return (*A)(m.world.Get(entity, m.id0))
}

// NewEntity creates a new [ecs.Entity] with the Map1's components.
//
// See also [ecs.World.NewEntity].
func (m *Map1[A]) NewEntity() ecs.Entity {
	entity := m.world.NewEntity(m.id0)
	return entity
}

// NewEntities creates entities with the Map1's components.
//
// See also [ecs.Batch.NewEntities].
func (m *Map1[A]) NewEntities(count int) Query1[A] {
	query := m.world.Batch().NewEntities(count, m.id0)
	return Query1[A]{
		Query: query,
		id0:   m.id0,
	}
}

// NewEntityWith creates a new [ecs.Entity] with the Map1's components, using the supplied values.
//
// See also [ecs.World.NewEntityWith].
func (m *Map1[A]) NewEntityWith(a *A) ecs.Entity {
	entity := m.world.NewEntityWith(
		ecs.Component{ID: m.id0, Comp: a},
	)
	return entity
}

// Add the Map1's components to the given entity.
//
// See also [ecs.World.Add].
func (m *Map1[A]) Add(entity ecs.Entity) {
	m.world.Add(entity, m.id0)
}

// Assign the Map1's components to the given entity, using the supplied values.
//
// See also [ecs.World.Assign].
func (m *Map1[A]) Assign(entity ecs.Entity, a *A) {
	m.world.Assign(entity,
		ecs.Component{ID: m.id0, Comp: a},
	)
}

// Remove the Map1's components from the given entity.
//
// See also [ecs.World.Remove].
func (m *Map1[A]) Remove(entity ecs.Entity) {
	m.world.Remove(entity, m.id0)
}

//////////////////////////////////////////////////////////////////////////

// Map2 is a helper for mapping two components.
type Map2[A any, B any] struct {
	world *ecs.World
	id0   ecs.ID
	id1   ecs.ID
}

// NewMap2 creates a new Map2 object.
func NewMap2[A any, B any](w *ecs.World) Map2[A, B] {
	return Map2[A, B]{
		world: w,
		id0:   ecs.ComponentID[A](w),
		id1:   ecs.ComponentID[B](w),
	}
}

// Get all the Map2's components for the given entity.
//
// See also [ecs.World.Get].
func (m *Map2[A, B]) Get(entity ecs.Entity) (*A, *B) {
	return (*A)(m.world.Get(entity, m.id0)),
		(*B)(m.world.Get(entity, m.id1))
}

// NewEntity creates a new [ecs.Entity] with the Map2's components.
//
// See also [ecs.World.NewEntity].
func (m *Map2[A, B]) NewEntity() ecs.Entity {
	entity := m.world.NewEntity(m.id0, m.id1)
	return entity
}

// NewEntities creates entities with the Map2's components.
//
// See also [ecs.Batch.NewEntities].
func (m *Map2[A, B]) NewEntities(count int) Query2[A, B] {
	query := m.world.Batch().NewEntities(count, m.id0, m.id1)
	return Query2[A, B]{
		Query: query,
		id0:   m.id0,
		id1:   m.id1,
	}
}

// NewEntityWith creates a new [ecs.Entity] with the Map2's components, using the supplied values.
//
// See also [ecs.World.NewEntityWith].
func (m *Map2[A, B]) NewEntityWith(a *A, b *B) ecs.Entity {
	entity := m.world.NewEntityWith(
		ecs.Component{ID: m.id0, Comp: a},
		ecs.Component{ID: m.id1, Comp: b},
	)
	return entity
}

// Add the Map2's components to the given entity.
//
// See also [ecs.World.Add].
func (m *Map2[A, B]) Add(entity ecs.Entity) {
	m.world.Add(entity, m.id0, m.id1)
}

// Assign the Map2's components to the given entity, using the supplied values.
//
// See also [ecs.World.Assign].
func (m *Map2[A, B]) Assign(entity ecs.Entity, a *A, b *B) {
	m.world.Assign(entity,
		ecs.Component{ID: m.id0, Comp: a},
		ecs.Component{ID: m.id1, Comp: b},
	)
}

// Remove the Map2's components from the given entity.
//
// See also [ecs.World.Remove].
func (m *Map2[A, B]) Remove(entity ecs.Entity) {
	m.world.Remove(entity, m.id0, m.id1)
}

//////////////////////////////////////////////////////////////////////////

// Map3 is a helper for mapping three components.
type Map3[A any, B any, C any] struct {
	world *ecs.World
	id0   ecs.ID
	id1   ecs.ID
	id2   ecs.ID
}

// NewMap3 creates a new Map3 object.
func NewMap3[A any, B any, C any](w *ecs.World) Map3[A, B, C] {
	return Map3[A, B, C]{
		world: w,
		id0:   ecs.ComponentID[A](w),
		id1:   ecs.ComponentID[B](w),
		id2:   ecs.ComponentID[C](w),
	}
}

// Get all the Map3's components for the given entity.
//
// See also [ecs.World.Get].
func (m *Map3[A, B, C]) Get(entity ecs.Entity) (*A, *B, *C) {
	return (*A)(m.world.Get(entity, m.id0)),
		(*B)(m.world.Get(entity, m.id1)),
		(*C)(m.world.Get(entity, m.id2))
}

// NewEntity creates a new [ecs.Entity] with the Map3's components.
//
// See also [ecs.World.NewEntity].
func (m *Map3[A, B, C]) NewEntity() ecs.Entity {
	entity := m.world.NewEntity(m.id0, m.id1, m.id2)
	return entity
}

// NewEntities creates entities with the Map3's components.
//
// See also [ecs.Batch.NewEntities].
func (m *Map3[A, B, C]) NewEntities(count int) Query3[A, B, C] {
	query := m.world.Batch().NewEntities(count, m.id0, m.id1, m.id2)
	return Query3[A, B, C]{
		Query: query,
		id0:   m.id0,
		id1:   m.id1,
		id2:   m.id2,
	}
}

// NewEntityWith creates a new [ecs.Entity] with the Map3's components, using the supplied values.
//
// See also [ecs.World.NewEntityWith].
func (m *Map3[A, B, C]) NewEntityWith(a *A, b *B, c *C) ecs.Entity {
	entity := m.world.NewEntityWith(
		ecs.Component{ID: m.id0, Comp: a},
		ecs.Component{ID: m.id1, Comp: b},
		ecs.Component{ID: m.id2, Comp: c},
	)
	return entity
}

// Add the Map3's components to the given entity.
//
// See also [ecs.World.Add].
func (m *Map3[A, B, C]) Add(entity ecs.Entity) {
	m.world.Add(entity, m.id0, m.id1, m.id2)
}

// Assign the Map3's components to the given entity, using the supplied values.
//
// See also [ecs.World.Assign].
func (m *Map3[A, B, C]) Assign(entity ecs.Entity, a *A, b *B, c *C) {
	m.world.Assign(entity,
		ecs.Component{ID: m.id0, Comp: a},
		ecs.Component{ID: m.id1, Comp: b},
		ecs.Component{ID: m.id2, Comp: c},
	)
}

// Remove the Map3's components from the given entity.
//
// See also [ecs.World.Remove].
func (m *Map3[A, B, C]) Remove(entity ecs.Entity) {
	m.world.Remove(entity, m.id0, m.id1, m.id2)
}

//////////////////////////////////////////////////////////////////////////

// Map4 is a helper for mapping four components.
type Map4[A any, B any, C any, D any] struct {
	world *ecs.World
	id0   ecs.ID
	id1   ecs.ID
	id2   ecs.ID
	id3   ecs.ID
}

// NewMap4 creates a new Map4 object.
func NewMap4[A any, B any, C any, D any](w *ecs.World) Map4[A, B, C, D] {
	return Map4[A, B, C, D]{
		world: w,
		id0:   ecs.ComponentID[A](w),
		id1:   ecs.ComponentID[B](w),
		id2:   ecs.ComponentID[C](w),
		id3:   ecs.ComponentID[D](w),
	}
}

// Get all the Map4's components for the given entity.
//
// See also [ecs.World.Get].
func (m *Map4[A, B, C, D]) Get(entity ecs.Entity) (*A, *B, *C, *D) {
	return (*A)(m.world.Get(entity, m.id0)),
		(*B)(m.world.Get(entity, m.id1)),
		(*C)(m.world.Get(entity, m.id2)),
		(*D)(m.world.Get(entity, m.id3))
}

// NewEntity creates a new [ecs.Entity] with the Map4's components.
//
// See also [ecs.World.NewEntity].
func (m *Map4[A, B, C, D]) NewEntity() ecs.Entity {
	entity := m.world.NewEntity(m.id0, m.id1, m.id2, m.id3)
	return entity
}

// NewEntities creates entities with the Map4's components.
//
// See also [ecs.Batch.NewEntities].
func (m *Map4[A, B, C, D]) NewEntities(count int) Query4[A, B, C, D] {
	query := m.world.Batch().NewEntities(count, m.id0, m.id1, m.id2, m.id3)
	return Query4[A, B, C, D]{
		Query: query,
		id0:   m.id0,
		id1:   m.id1,
		id2:   m.id2,
		id3:   m.id3,
	}
}

// NewEntityWith creates a new [ecs.Entity] with the Map4's components, using the supplied values.
//
// See also [ecs.World.NewEntityWith].
func (m *Map4[A, B, C, D]) NewEntityWith(a *A, b *B, c *C, d *D) ecs.Entity {
	entity := m.world.NewEntityWith(
		ecs.Component{ID: m.id0, Comp: a},
		ecs.Component{ID: m.id1, Comp: b},
		ecs.Component{ID: m.id2, Comp: c},
		ecs.Component{ID: m.id3, Comp: d},
	)
	return entity
}

// Add the Map4's components to the given entity.
//
// See also [ecs.World.Add].
func (m *Map4[A, B, C, D]) Add(entity ecs.Entity) {
	m.world.Add(entity, m.id0, m.id1, m.id2, m.id3)
}

// Assign the Map4's components to the given entity, using the supplied values.
//
// See also [ecs.World.Assign].
func (m *Map4[A, B, C, D]) Assign(entity ecs.Entity, a *A, b *B, c *C, d *D) {
	m.world.Assign(entity,
		ecs.Component{ID: m.id0, Comp: a},
		ecs.Component{ID: m.id1, Comp: b},
		ecs.Component{ID: m.id2, Comp: c},
		ecs.Component{ID: m.id3, Comp: d},
	)
}

// Remove the Map4's components from the given entity.
//
// See also [ecs.World.Remove].
func (m *Map4[A, B, C, D]) Remove(entity ecs.Entity) {
	m.world.Remove(entity, m.id0, m.id1, m.id2, m.id3)
}

//////////////////////////////////////////////////////////////////////////

// Map5 is a helper for mapping five components.
type Map5[A any, B any, C any, D any, E any] struct {
	world *ecs.World
	id0   ecs.ID
	id1   ecs.ID
	id2   ecs.ID
	id3   ecs.ID
	id4   ecs.ID
}

// NewMap5 creates a new Map5 object.
func NewMap5[A any, B any, C any, D any, E any](w *ecs.World) Map5[A, B, C, D, E] {
	return Map5[A, B, C, D, E]{
		world: w,
		id0:   ecs.ComponentID[A](w),
		id1:   ecs.ComponentID[B](w),
		id2:   ecs.ComponentID[C](w),
		id3:   ecs.ComponentID[D](w),
		id4:   ecs.ComponentID[E](w),
	}
}

// Get all the Map5's components for the given entity.
//
// See also [ecs.World.Get].
func (m *Map5[A, B, C, D, E]) Get(entity ecs.Entity) (*A, *B, *C, *D, *E) {
	return (*A)(m.world.Get(entity, m.id0)),
		(*B)(m.world.Get(entity, m.id1)),
		(*C)(m.world.Get(entity, m.id2)),
		(*D)(m.world.Get(entity, m.id3)),
		(*E)(m.world.Get(entity, m.id4))
}

// NewEntity creates a new [ecs.Entity] with the Map5's components.
//
// See also [ecs.World.NewEntity].
func (m *Map5[A, B, C, D, E]) NewEntity() ecs.Entity {
	entity := m.world.NewEntity(m.id0, m.id1, m.id2, m.id3, m.id4)
	return entity
}

// NewEntities creates entities with the Map5's components.
//
// See also [ecs.Batch.NewEntities].
func (m *Map5[A, B, C, D, E]) NewEntities(count int) Query5[A, B, C, D, E] {
	query := m.world.Batch().NewEntities(count, m.id0, m.id1, m.id2, m.id3, m.id4)
	return Query5[A, B, C, D, E]{
		Query: query,
		id0:   m.id0,
		id1:   m.id1,
		id2:   m.id2,
		id3:   m.id3,
		id4:   m.id4,
	}
}

// NewEntityWith creates a new [ecs.Entity] with the Map5's components, using the supplied values.
//
// See also [ecs.World.NewEntityWith].
func (m *Map5[A, B, C, D, E]) NewEntityWith(a *A, b *B, c *C, d *D, e *E) ecs.Entity {
	entity := m.world.NewEntityWith(
		ecs.Component{ID: m.id0, Comp: a},
		ecs.Component{ID: m.id1, Comp: b},
		ecs.Component{ID: m.id2, Comp: c},
		ecs.Component{ID: m.id3, Comp: d},
		ecs.Component{ID: m.id4, Comp: e},
	)
	return entity
}

// Add the Map5's components to the given entity.
//
// See also [ecs.World.Add].
func (m *Map5[A, B, C, D, E]) Add(entity ecs.Entity) {
	m.world.Add(entity, m.id0, m.id1, m.id2, m.id3, m.id4)
}

// Assign the Map5's components to the given entity, using the supplied values.
//
// See also [ecs.World.Assign].
func (m *Map5[A, B, C, D, E]) Assign(entity ecs.Entity, a *A, b *B, c *C, d *D, e *E) {
	m.world.Assign(entity,
		ecs.Component{ID: m.id0, Comp: a},
		ecs.Component{ID: m.id1, Comp: b},
		ecs.Component{ID: m.id2, Comp: c},
		ecs.Component{ID: m.id3, Comp: d},
		ecs.Component{ID: m.id4, Comp: e},
	)
}

// Remove the Map5's components from the given entity.
//
// See also [ecs.World.Remove].
func (m *Map5[A, B, C, D, E]) Remove(entity ecs.Entity) {
	m.world.Remove(entity, m.id0, m.id1, m.id2, m.id3, m.id4)
}

//////////////////////////////////////////////////////////////////////////

// Map6 is a helper for mapping six components.
type Map6[A any, B any, C any, D any, E any, F any] struct {
	world *ecs.World
	id0   ecs.ID
	id1   ecs.ID
	id2   ecs.ID
	id3   ecs.ID
	id4   ecs.ID
	id5   ecs.ID
}

// NewMap6 creates a new Map6 object.
func NewMap6[A any, B any, C any, D any, E any, F any](w *ecs.World) Map6[A, B, C, D, E, F] {
	return Map6[A, B, C, D, E, F]{
		world: w,
		id0:   ecs.ComponentID[A](w),
		id1:   ecs.ComponentID[B](w),
		id2:   ecs.ComponentID[C](w),
		id3:   ecs.ComponentID[D](w),
		id4:   ecs.ComponentID[E](w),
		id5:   ecs.ComponentID[F](w),
	}
}

// Get all the Map6's components for the given entity.
//
// See also [ecs.World.Get].
func (m *Map6[A, B, C, D, E, F]) Get(entity ecs.Entity) (*A, *B, *C, *D, *E, *F) {
	return (*A)(m.world.Get(entity, m.id0)),
		(*B)(m.world.Get(entity, m.id1)),
		(*C)(m.world.Get(entity, m.id2)),
		(*D)(m.world.Get(entity, m.id3)),
		(*E)(m.world.Get(entity, m.id4)),
		(*F)(m.world.Get(entity, m.id5))
}

// NewEntity creates a new [ecs.Entity] with the Map6's components.
//
// See also [ecs.World.NewEntity].
func (m *Map6[A, B, C, D, E, F]) NewEntity() ecs.Entity {
	entity := m.world.NewEntity(m.id0, m.id1, m.id2, m.id3, m.id4, m.id5)
	return entity
}

// NewEntities creates entities with the Map6's components.
//
// See also [ecs.Batch.NewEntities].
func (m *Map6[A, B, C, D, E, F]) NewEntities(count int) Query6[A, B, C, D, E, F] {
	query := m.world.Batch().NewEntities(count, m.id0, m.id1, m.id2, m.id3, m.id4, m.id5)
	return Query6[A, B, C, D, E, F]{
		Query: query,
		id0:   m.id0,
		id1:   m.id1,
		id2:   m.id2,
		id3:   m.id3,
		id4:   m.id4,
		id5:   m.id5,
	}
}

// NewEntityWith creates a new [ecs.Entity] with the Map6's components, using the supplied values.
//
// See also [ecs.World.NewEntityWith].
func (m *Map6[A, B, C, D, E, F]) NewEntityWith(a *A, b *B, c *C, d *D, e *E, f *F) ecs.Entity {
	entity := m.world.NewEntityWith(
		ecs.Component{ID: m.id0, Comp: a},
		ecs.Component{ID: m.id1, Comp: b},
		ecs.Component{ID: m.id2, Comp: c},
		ecs.Component{ID: m.id3, Comp: d},
		ecs.Component{ID: m.id4, Comp: e},
		ecs.Component{ID: m.id5, Comp: f},
	)
	return entity
}

// Add the Map6's components to the given entity.
//
// See also [ecs.World.Add].
func (m *Map6[A, B, C, D, E, F]) Add(entity ecs.Entity) {
	m.world.Add(entity, m.id0, m.id1, m.id2, m.id3, m.id4, m.id5)
}

// Assign the Map6's components to the given entity, using the supplied values.
//
// See also [ecs.World.Assign].
func (m *Map6[A, B, C, D, E, F]) Assign(entity ecs.Entity, a *A, b *B, c *C, d *D, e *E, f *F) {
	m.world.Assign(entity,
		ecs.Component{ID: m.id0, Comp: a},
		ecs.Component{ID: m.id1, Comp: b},
		ecs.Component{ID: m.id2, Comp: c},
		ecs.Component{ID: m.id3, Comp: d},
		ecs.Component{ID: m.id4, Comp: e},
		ecs.Component{ID: m.id5, Comp: f},
	)
}

// Remove the Map6's components from the given entity.
//
// See also [ecs.World.Remove].
func (m *Map6[A, B, C, D, E, F]) Remove(entity ecs.Entity) {
	m.world.Remove(entity, m.id0, m.id1, m.id2, m.id3, m.id4, m.id5)
}

//////////////////////////////////////////////////////////////////////////

// Map7 is a helper for mapping seven components.
type Map7[A any, B any, C any, D any, E any, F any, G any] struct {
	world *ecs.World
	id0   ecs.ID
	id1   ecs.ID
	id2   ecs.ID
	id3   ecs.ID
	id4   ecs.ID
	id5   ecs.ID
	id6   ecs.ID
}

// NewMap7 creates a new Map7 object.
func NewMap7[A any, B any, C any, D any, E any, F any, G any](w *ecs.World) Map7[A, B, C, D, E, F, G] {
	return Map7[A, B, C, D, E, F, G]{
		world: w,
		id0:   ecs.ComponentID[A](w),
		id1:   ecs.ComponentID[B](w),
		id2:   ecs.ComponentID[C](w),
		id3:   ecs.ComponentID[D](w),
		id4:   ecs.ComponentID[E](w),
		id5:   ecs.ComponentID[F](w),
		id6:   ecs.ComponentID[G](w),
	}
}

// Get all the Map7's components for the given entity.
//
// See also [ecs.World.Get].
func (m *Map7[A, B, C, D, E, F, G]) Get(entity ecs.Entity) (*A, *B, *C, *D, *E, *F, *G) {
	return (*A)(m.world.Get(entity, m.id0)),
		(*B)(m.world.Get(entity, m.id1)),
		(*C)(m.world.Get(entity, m.id2)),
		(*D)(m.world.Get(entity, m.id3)),
		(*E)(m.world.Get(entity, m.id4)),
		(*F)(m.world.Get(entity, m.id5)),
		(*G)(m.world.Get(entity, m.id6))
}

// NewEntity creates a new [ecs.Entity] with the Map7's components.
//
// See also [ecs.World.NewEntity].
func (m *Map7[A, B, C, D, E, F, G]) NewEntity() ecs.Entity {
	entity := m.world.NewEntity(m.id0, m.id1, m.id2, m.id3, m.id4, m.id5, m.id6)
	return entity
}

// NewEntities creates entities with the Map7's components.
//
// See also [ecs.Batch.NewEntities].
func (m *Map7[A, B, C, D, E, F, G]) NewEntities(count int) Query7[A, B, C, D, E, F, G] {
	query := m.world.Batch().NewEntities(count, m.id0, m.id1, m.id2, m.id3, m.id4, m.id5, m.id6)
	return Query7[A, B, C, D, E, F, G]{
		Query: query,
		id0:   m.id0,
		id1:   m.id1,
		id2:   m.id2,
		id3:   m.id3,
		id4:   m.id4,
		id5:   m.id5,
		id6:   m.id6,
	}
}

// NewEntityWith creates a new [ecs.Entity] with the Map7's components, using the supplied values.
//
// See also [ecs.World.NewEntityWith].
func (m *Map7[A, B, C, D, E, F, G]) NewEntityWith(a *A, b *B, c *C, d *D, e *E, f *F, g *G) ecs.Entity {
	entity := m.world.NewEntityWith(
		ecs.Component{ID: m.id0, Comp: a},
		ecs.Component{ID: m.id1, Comp: b},
		ecs.Component{ID: m.id2, Comp: c},
		ecs.Component{ID: m.id3, Comp: d},
		ecs.Component{ID: m.id4, Comp: e},
		ecs.Component{ID: m.id5, Comp: f},
		ecs.Component{ID: m.id6, Comp: g},
	)
	return entity
}

// Add the Map7's components to the given entity.
//
// See also [ecs.World.Add].
func (m *Map7[A, B, C, D, E, F, G]) Add(entity ecs.Entity) {
	m.world.Add(entity, m.id0, m.id1, m.id2, m.id3, m.id4, m.id5, m.id6)
}

// Assign the Map7's components to the given entity, using the supplied values.
//
// See also [ecs.World.Assign].
func (m *Map7[A, B, C, D, E, F, G]) Assign(entity ecs.Entity, a *A, b *B, c *C, d *D, e *E, f *F, g *G) {
	m.world.Assign(entity,
		ecs.Component{ID: m.id0, Comp: a},
		ecs.Component{ID: m.id1, Comp: b},
		ecs.Component{ID: m.id2, Comp: c},
		ecs.Component{ID: m.id3, Comp: d},
		ecs.Component{ID: m.id4, Comp: e},
		ecs.Component{ID: m.id5, Comp: f},
		ecs.Component{ID: m.id6, Comp: g},
	)
}

// Remove the Map7's components from the given entity.
//
// See also [ecs.World.Remove].
func (m *Map7[A, B, C, D, E, F, G]) Remove(entity ecs.Entity) {
	m.world.Remove(entity, m.id0, m.id1, m.id2, m.id3, m.id4, m.id5, m.id6)
}

//////////////////////////////////////////////////////////////////////////

// Map8 is a helper for mapping eight components.
type Map8[A any, B any, C any, D any, E any, F any, G any, H any] struct {
	world *ecs.World
	id0   ecs.ID
	id1   ecs.ID
	id2   ecs.ID
	id3   ecs.ID
	id4   ecs.ID
	id5   ecs.ID
	id6   ecs.ID
	id7   ecs.ID
}

// NewMap8 creates a new Map8 object.
func NewMap8[A any, B any, C any, D any, E any, F any, G any, H any](w *ecs.World) Map8[A, B, C, D, E, F, G, H] {
	return Map8[A, B, C, D, E, F, G, H]{
		world: w,
		id0:   ecs.ComponentID[A](w),
		id1:   ecs.ComponentID[B](w),
		id2:   ecs.ComponentID[C](w),
		id3:   ecs.ComponentID[D](w),
		id4:   ecs.ComponentID[E](w),
		id5:   ecs.ComponentID[F](w),
		id6:   ecs.ComponentID[G](w),
		id7:   ecs.ComponentID[H](w),
	}
}

// Get all the Map8's components for the given entity.
//
// See also [ecs.World.Get].
func (m *Map8[A, B, C, D, E, F, G, H]) Get(entity ecs.Entity) (*A, *B, *C, *D, *E, *F, *G, *H) {
	return (*A)(m.world.Get(entity, m.id0)),
		(*B)(m.world.Get(entity, m.id1)),
		(*C)(m.world.Get(entity, m.id2)),
		(*D)(m.world.Get(entity, m.id3)),
		(*E)(m.world.Get(entity, m.id4)),
		(*F)(m.world.Get(entity, m.id5)),
		(*G)(m.world.Get(entity, m.id6)),
		(*H)(m.world.Get(entity, m.id7))
}

// NewEntity creates a new [ecs.Entity] with the Map8's components.
//
// See also [ecs.World.NewEntity].
func (m *Map8[A, B, C, D, E, F, G, H]) NewEntity() ecs.Entity {
	entity := m.world.NewEntity(m.id0, m.id1, m.id2, m.id3, m.id4, m.id5, m.id6, m.id7)
	return entity
}

// NewEntities creates entities with the Map8's components.
//
// See also [ecs.Batch.NewEntities].
func (m *Map8[A, B, C, D, E, F, G, H]) NewEntities(count int) Query8[A, B, C, D, E, F, G, H] {
	query := m.world.Batch().NewEntities(count, m.id0, m.id1, m.id2, m.id3, m.id4, m.id5, m.id6, m.id7)
	return Query8[A, B, C, D, E, F, G, H]{
		Query: query,
		id0:   m.id0,
		id1:   m.id1,
		id2:   m.id2,
		id3:   m.id3,
		id4:   m.id4,
		id5:   m.id5,
		id6:   m.id6,
		id7:   m.id7,
	}
}

// NewEntityWith creates a new [ecs.Entity] with the Map8's components, using the supplied values.
//
// See also [ecs.World.NewEntityWith].
func (m *Map8[A, B, C, D, E, F, G, H]) NewEntityWith(a *A, b *B, c *C, d *D, e *E, f *F, g *G, h *H) ecs.Entity {
	entity := m.world.NewEntityWith(
		ecs.Component{ID: m.id0, Comp: a},
		ecs.Component{ID: m.id1, Comp: b},
		ecs.Component{ID: m.id2, Comp: c},
		ecs.Component{ID: m.id3, Comp: d},
		ecs.Component{ID: m.id4, Comp: e},
		ecs.Component{ID: m.id5, Comp: f},
		ecs.Component{ID: m.id6, Comp: g},
		ecs.Component{ID: m.id7, Comp: h},
	)
	return entity
}

// Add the Map8's components to the given entity.
//
// See also [ecs.World.Add].
func (m *Map8[A, B, C, D, E, F, G, H]) Add(entity ecs.Entity) {
	m.world.Add(entity, m.id0, m.id1, m.id2, m.id3, m.id4, m.id5, m.id6, m.id7)
}

// Assign the Map8's components to the given entity, using the supplied values.
//
// See also [ecs.World.Assign].
func (m *Map8[A, B, C, D, E, F, G, H]) Assign(entity ecs.Entity, a *A, b *B, c *C, d *D, e *E, f *F, g *G, h *H) {
	m.world.Assign(entity,
		ecs.Component{ID: m.id0, Comp: a},
		ecs.Component{ID: m.id1, Comp: b},
		ecs.Component{ID: m.id2, Comp: c},
		ecs.Component{ID: m.id3, Comp: d},
		ecs.Component{ID: m.id4, Comp: e},
		ecs.Component{ID: m.id5, Comp: f},
		ecs.Component{ID: m.id6, Comp: g},
		ecs.Component{ID: m.id7, Comp: h},
	)
}

// Remove the Map8's components from the given entity.
//
// See also [ecs.World.Remove].
func (m *Map8[A, B, C, D, E, F, G, H]) Remove(entity ecs.Entity) {
	m.world.Remove(entity, m.id0, m.id1, m.id2, m.id3, m.id4, m.id5, m.id6, m.id7)
}
