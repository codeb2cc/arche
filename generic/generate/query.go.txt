
//////////////////////////////////////////////////////////////////////////

// Filter{{ .Index }} is a helper for building [Query{{ .Index }}] query iterators.
type Filter{{ .Index }}{{ .TypesFull }} struct {
	include  []Comp
	optional []Comp
	exclude  []Comp
	compiled compiledQuery
}

// NewFilter{{ .Index }} creates a generic Filter{{ .Index }} for {{ .NumberStr }} components.
//
// See also [ecs.World.Query].
func NewFilter{{ .Index }}{{ .TypesFull }}() *Filter{{ .Index }}{{ .Types }} {
	return &Filter{{ .Index }}{{ .Types }}{
		include: {{ .Include }},
	}
}

// Optional makes some of the query's components optional.
//
// Create the required mask items with [T].
//
// Only affects component types that were specified in the query.
func (q *Filter{{ .Index }}{{ .Types }}) Optional(mask ...Comp) *Filter{{ .Index }}{{ .Types }} {
	q.optional = append(q.optional, mask...)
	q.compiled.Reset()
	return q
}

// With adds more required components that are not accessible using Get... methods.
//
// Create the required mask items with [T].
func (q *Filter{{ .Index }}{{ .Types }}) With(mask ...Comp) *Filter{{ .Index }}{{ .Types }} {
	q.include = append(q.include, mask...)
	q.compiled.Reset()
	return q
}

// Without excludes entities with any of the given components from the query.
//
// Create the required mask items with [T].
func (q *Filter{{ .Index }}{{ .Types }}) Without(mask ...Comp) *Filter{{ .Index }}{{ .Types }} {
	q.exclude = append(q.exclude, mask...)
	q.compiled.Reset()
	return q
}

// Query builds a [Query{{ .Index }}] query for iteration.
func (q *Filter{{ .Index }}{{ .Types }}) Query(w *ecs.World) Query{{ .Index }}{{ .Types }} {
	q.compiled.Compile(w, q.include, q.optional, q.exclude)
	return Query{{ .Index }}{{ .Types }}{
		w.Query(q.compiled.Filter()),
		q.compiled.Ids,
	}
}

// Filter generates and return the [ecs.Filter] used after [Filter{{ .Index }}.Query].
//
// Can be passed to [ecs.World.Query].
// For the intended generic use, however, generate a generic query with [Filter{{ .Index }}.Query].
func (q *Filter{{ .Index }}{{ .Types }}) Filter(w *ecs.World) ecs.MaskPair {
	q.compiled.Compile(w, q.include, q.optional, q.exclude)
	return q.compiled.Filter()
}

// Query{{ .Index }} is a generic query iterator for {{ .NumberStr }} components.
//
// Create one with [NewFilter{{ .Index }}] and [Filter{{ .Index }}.Query]
type Query{{ .Index }}{{ .TypesFull }} struct {
	ecs.Query
	ids []ecs.ID
}
