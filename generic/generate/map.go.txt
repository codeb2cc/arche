
//////////////////////////////////////////////////////////////////////////

// Map{{ .Index }} is a helper for mapping {{ .NumberStr }} components.
type Map{{ .Index }}{{ .TypesFull }} struct {
	world *ecs.World
	mask ecs.Mask
	{{ .IDTypes }}
}

// NewMap{{ .Index }} creates a new Map{{ .Index }} object.
func NewMap{{ .Index }}{{ .TypesFull }}(w *ecs.World) Map{{ .Index }}{{ .Types }} {
	m := Map{{ .Index }}{{ .Types }}{
		world: w,
		{{ .IDAssign }}
	}
	m.mask = ecs.All({{ .IDList }})
	return m
}

// Get all the Map{{ .Index }}'s components for the given entity.
//
// See also [ecs.World.Get].
func (m *Map{{ .Index }}{{ .Types }}) Get(entity ecs.Entity) ({{ .TypesReturn }}) {
	return {{ .ReturnAll }}
}

// NewEntity creates a new [ecs.Entity] with the Map{{ .Index }}'s components.
//
// See also [ecs.World.NewEntity].
func (m *Map{{ .Index }}{{ .Types }}) NewEntity() ecs.Entity {
	entity := m.world.NewEntity({{ .IDList }})
	return entity
}

// NewEntities creates entities with the Map{{ .Index }}'s components.
//
// See also [ecs.Batch.NewEntities].
func (m *Map{{ .Index }}{{ .Types }}) NewEntities(count int) Query{{ .Index }}{{ .Types }} {
	query := m.world.Batch().NewEntities(count, {{ .IDList }})
	return Query{{ .Index }}{{ .Types }}{
		Query: query,
		{{ .IDAssign2 }}
	}
}

{{if .ReturnAll}}
// NewEntityWith creates a new [ecs.Entity] with the Map{{ .Index }}'s components, using the supplied values.
//
// See also [ecs.World.NewEntityWith].
func (m *Map{{ .Index }}{{ .Types }}) NewEntityWith({{ .Arguments }}) ecs.Entity {
	entity := m.world.NewEntityWith(
		{{ .Components }}
	)
	return entity
}

// NewEntitiesWith creates entities with the Map{{ .Index }}'s components, using the supplied values.
//
// See also [ecs.Batch.NewEntitiesWith].
func (m *Map{{ .Index }}{{ .Types }}) NewEntitiesWith(count int, {{ .Arguments }}) Query{{ .Index }}{{ .Types }} {
	query := m.world.Batch().NewEntitiesWith(count, {{ .Components }})
	return Query{{ .Index }}{{ .Types }}{
		Query: query,
		{{ .IDAssign2 }}
	}
}

// Add the Map{{ .Index }}'s components to the given entity.
//
// See also [ecs.World.Add].
func (m *Map{{ .Index }}{{ .Types }}) Add(entity ecs.Entity) {
	m.world.Add(entity, {{ .IDList }})
}

// Assign the Map{{ .Index }}'s components to the given entity, using the supplied values.
//
// See also [ecs.World.Assign].
func (m *Map{{ .Index }}{{ .Types }}) Assign(entity ecs.Entity, {{ .Arguments }}) {
	m.world.Assign(entity,
		{{ .Components }}
	)
}
{{ end }}

// Remove the Map{{ .Index }}'s components from the given entity.
//
// See also [ecs.World.Remove].
func (m *Map{{ .Index }}{{ .Types }}) Remove(entity ecs.Entity) {
	m.world.Remove(entity, {{ .IDList }})
}


// RemoveEntities removes all components from the world that match the Map{{ .Index }}'s components.
//
// See also [ecs.World.NewEntityWith].
func (m *Map{{ .Index }}{{ .Types }}) RemoveEntities(exact bool) {
	if exact {
		filter := m.mask.Exact()
		m.world.Batch().RemoveEntities(&filter)
	} else {
		m.world.Batch().RemoveEntities(m.mask)
	}
}