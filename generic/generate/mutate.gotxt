
//////////////////////////////////////////////////////////////////////////

// Mutate{{ .Index }} mutates {{ .Index }} components
type Mutate{{ .Index }}{{ .TypesFull }} struct {
	ids   []ecs.ID
	world *ecs.World
}

// NewMutate{{ .Index }} creates a new Mutate{{ .Index }}
func NewMutate{{ .Index }}{{ .TypesFull }}(w *ecs.World) Mutate{{ .Index }}{{ .Types }} {
	return Mutate{{ .Index }}{{ .Types }}{
		ids:   {{ .Include }},
		world: w,
	}
}

func (m *Mutate{{ .Index }}{{ .Types }}) NewEntity() (ecs.Entity, {{ .TypesReturn }}) {
	entity := m.world.NewEntity(m.ids...)
	return entity, {{ .ReturnAll }}
}

func (m *Mutate{{ .Index }}{{ .Types }}) NewEntityWith({{ .Arguments }}) (ecs.Entity, {{ .TypesReturn }}) {
	entity := m.world.NewEntityWith(
		{{ .Components }}
	)
	return entity, {{ .ReturnAll }}
}

func (m *Mutate{{ .Index }}{{ .Types }}) Add(entity ecs.Entity) ({{ .TypesReturn }}) {
	m.world.Add(entity, m.ids...)
	return {{ .ReturnAll }}
}

func (m *Mutate{{ .Index }}{{ .Types }}) Assign(entity ecs.Entity, {{ .Arguments }}) ({{ .TypesReturn }}) {
	m.world.AssignN(entity,
		{{ .Components }}
	)
	return {{ .ReturnAll }}
}

func (m *Mutate{{ .Index }}{{ .Types }}) Remove(entity ecs.Entity) {
	m.world.Remove(entity, m.ids...)
}
